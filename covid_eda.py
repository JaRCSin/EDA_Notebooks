# -*- coding: utf-8 -*-
"""Covid_EDA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Nel2IUZ4CusohgwVP9_TzYFunKbEAZ5a

## Import Necessary dependencies and data
"""

# Mount drive
from google.colab import drive
drive.mount('/content/drive')

# Kaggle
# Import OS for navigation and environment set up
import os
# Check current location, '/content' is the Colab virtual machine
os.getcwd()
# Enable the Kaggle environment, use the path to the directory your Kaggle API JSON is stored in
os.environ['KAGGLE_CONFIG_DIR'] = '/content/drive/MyDrive/kaggle'

!pip install kaggle

# Importing Covid Dataset from kaggle
# Navigate into Drive where you want to store your Kaggle data
os.chdir('/content/drive/MyDrive/kaggle')
# Paste and run the copied API command, the data will download to the current directory
!kaggle datasets download -d yamqwe/omicron-covid19-variant-daily-cases
# Check contents of directory, you should see the .zip file for the competition in your Drive
os.listdir()

# Complete path to storage location of the .zip file of data
zip_path = '/content/drive/MyDrive/kaggle/covid-19.zip'
# Check current directory (be sure you're in the directory where Colab operates: '/content')
os.getcwd()
# Copy the .zip file into the present directory
!cp '{zip_path}' .
# Unzip quietly 
!unzip -q 'covid-19.zip'
# View the unzipped contents in the virtual machine
os.listdir()

"""## EDA"""

import pandas as pd
import numpy as np
import plotly.graph_objs as go
import  plotly.express as px

#/content/drive/MyDrive/kaggle/covid-variants.csv
df = pd.read_csv('/content/drive/MyDrive/kaggle/covid-variants.csv')
df.head()

df.info()

# Rename the columns 
df = df.rename(columns = {"num_sequences_total":"Total"})
df = df.rename(columns = {"date":"Date"})
df = df.rename(columns = {"location":"Location"})

# The list of locations 
df['Location'].unique()

dfomidate = df.groupby('Date')['Total'].sum().reset_index()
fig = px.bar(dfomidate,
             x='Date', 
             y='Total', 
             color='Total',
             color_continuous_scale = 'reds')

fig.update_layout(title = '<b>World-Total confirmed cases(Omicron)-From 2020 to 2022<b>',
                  title_x = 0.5,
                  title_font = dict(size= 18, color = 'DarkRed'),
                  yaxis = dict(title = 'Total Cases'))
fig.show()

dfomilo = df.groupby('Location')['Total'].sum().sort_values(ascending = False).reset_index().head(20)
fig = px.bar(dfomilo,
             x='Location', 
             y='Total', 
             color='Total',
             color_continuous_scale = 'reds')

fig.update_layout(title = '<b>Top 20 countries with the most confirmed cases(Omicron)<b>',
                  title_x = 0.5,
                  title_font = dict(size= 18, color = 'DarkRed'),
                  yaxis = dict(title = 'Total Cases'))
fig.show()

# Five Countries - Top 3(United Stated, United Kingdom, Germany) and Aisa(Japan,South Korea)
dfus = df[df['Location']=='United States']
dfuk = df[df['Location']=='United Kingdom']
dfger = df[df['Location']=='Germany']
dfja = df[df['Location']=='Japan']
dfsk = df[df['Location']=='South Korea']
dfph = df[df['Location']=='Philippines']

dfuaomi = dfus.groupby('Date')['Total'].sum().reset_index()
dfukomi = dfuk.groupby('Date')['Total'].sum().reset_index()
dfgeromi = dfger.groupby('Date')['Total'].sum().reset_index()
dfjaomi = dfja.groupby('Date')['Total'].sum().reset_index()
dfskomi = dfsk.groupby('Date')['Total'].sum().reset_index()
dfphomi = dfph.groupby('Date')['Total'].sum().reset_index()

fig = go.Figure()

fig.add_trace(go.Scatter(x = dfuaomi['Date'],
                         y = dfuaomi['Total'],
                         mode = 'lines',
                         name = 'United States',
                         marker_color = 'DarkBlue'))

fig.add_trace(go.Scatter(x = dfukomi['Date'],
                         y = dfukomi['Total'],
                         mode = 'lines',
                         name = 'United Kingdom',
                         marker_color = 'DarkOrchid',
                         line = dict(dash = 'dot')))

fig.add_trace(go.Scatter(x = dfgeromi['Date'],
                         y = dfgeromi['Total'],
                         mode = 'lines',
                         name = 'Germany',
                         marker_color = 'RoyalBlue',
                         line = dict(dash = 'dashdot')))

fig.add_trace(go.Scatter(x = dfjaomi['Date'],
                         y = dfjaomi['Total'],
                         mode = 'lines',
                         name = 'Japan',
                         marker_color = 'Crimson',
                         line = dict(dash = 'dash')))

fig.add_trace(go.Scatter(x = dfskomi['Date'],
                         y = dfskomi['Total'],
                         mode = 'lines',
                         name = 'South Korea',
                         marker_color = 'LightSeaGreen'))

fig.add_trace(go.Scatter(x = dfskomi['Date'],
                         y = dfskomi['Total'],
                         mode = 'lines',
                         name = 'Philippines',
                         marker_color = 'Black'))

fig.update_layout(title = '<b>Six Countries-Total confirmed cases(Omicron)-From 2020 to 2022<b>',
                  title_x = 0.5,
                  title_font= dict(size = 18, color = 'Darkred'),
                  template = 'plotly_white')

fig.show()

fig = go.Figure()

location_list = list(df['Location'].unique())

for location in location_list:
    fig.add_trace(
        go.Scatter(
            x = df['Date'][df['Location']==location],
            y = df['Total'][df['Location']==location],
            name = location, 
            visible = True))
    
buttons = []

for i, location in enumerate(location_list):
    args = [False] * len(location_list)
    args[i] = True
    
    button = dict(label = location,
                  method = "update",
                  args=[{"visible": args}])
    
    buttons.append(button)
    
fig.update_layout(
    updatemenus=[dict(direction="down", 
                      pad={"r": 10, "t": 10},
                      showactive=True, 
                      x=0.15, 
                      xanchor="left",
                      y=1.12, 
                      yanchor="top",
                      buttons=buttons)])

fig.update_layout(
    annotations=[
        dict(text="<b>Choose:<b>", 
             showarrow=False,
             x=0, 
             y=1.08, 
             xref= 'paper',
             yref="paper",
             font=dict(size=15,color = 'DarkSlateBlue'))])

fig.update_layout(title ="<b>Choose Location which you want to understand<b>",
                  title_x = 0.5,
                  title_font = dict(size = 18, color = 'Darkred'),
                  autosize=False,
                  width=1200,
                  height=600)
fig.show()

top_20 = df.groupby(['Location'])['Total'].sum().sort_values(ascending = False).reset_index().head(20)
figure = px.choropleth(top_20,locations='Location', locationmode= 'country names', color= 'Total', 
                       hover_name='Location', color_continuous_scale='tealgrn', 
                       range_color=[1,1000000],title='Countries with Highest Number of CovidCases')
figure.show()